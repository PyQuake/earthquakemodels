tuk = TukeyHSD(resultANOVA)
op <- par(mar = c(5,14,4,2) + 0.1)
plot(tuk,las=1)
print(tuk)
save(finalData,file="data.Rda")
10
typeof(10)
typeof(str(10))
typeof(tostring(10))
typeof(toString(10))
#!/usr/bin/env Rscript
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#region(kanto), year(2000~2005)=>2005~2010, model (listas, ga, RI), depth(25,60,100)
setwd("~/Documents/estudos/unb/earthquakemodels/Zona2/dataForR")
loadData = function(region, year, depth, type){
file = paste(region,"_",year,"_LastGen",depth,type,".txt",sep="")
data = read.csv2(file, sep='\n', header=F)
return(data)
}
chooseRegion = function(i){
if (i==1) {
region="Kanto"
}
else if (i==2) {
region="Kansai"
}
else if (i==3) {
region = "Tohoku"
}
else{
region = "EastJapan"
}
return(region)
}
convertToNumeric = function(model){
values = rep(0, length(model$V1))
for (k in 1:length(model$V1)){
values[k] = as.numeric(levels(model$V1[k]))[model$V1[k]]
}
return(values)
}
loadRI = function(year){
file = paste("ri_",year,sep="")
dataRI = read.csv2(file, sep='', header=F)
return(dataRI)
}
finalData = data.frame(
setNames(replicate(5,numeric(0), simplify = F),
c("loglikeValues", "model", "depths", "years", "regions")))
for (i in 1:4) {
region = chooseRegion(i)
for (year in 2000:2005) {
gaModel25 = loadData(region, year, '25', 'gaModel')
gaModel60 = loadData(region, year, '60', 'gaModel')
gaModel100 = loadData(region, year, '100', 'gaModel')
lista25 = loadData(region, year, '25', 'listaGA_New')
lista60 = loadData(region, year, '60', 'listaGA_New')
lista100 = loadData(region, year, '100', 'listaGA_New')
valuesGA25 = convertToNumeric(gaModel25)
valuesGA60 = convertToNumeric(gaModel60)
valuesGA100 = convertToNumeric(gaModel100)
valuesLista25 = convertToNumeric(lista25)
valuesLista60 = convertToNumeric(lista60)
valuesLista100 = convertToNumeric(lista100)
loglikeGA = c(valuesGA25, valuesGA60, valuesGA100)
loglikeLista = c(valuesLista25, valuesLista60, valuesLista100)
loglikeValues = c(loglikeGA, loglikeLista)
nameGa = c(rep("gaModel",30))
nameLista = c(rep("lista",30))
years = c(rep(toString(year+5),60))
regions = c(rep(region, 60))
depth25 = c(rep('25',10))
depth60 = c(rep('60',10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth25, depth60, depth100)
model = c(nameGa, nameLista)
depths= c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model, depths, years, regions)
if (dim(finalData)[1]==0) {
finalData = merge(finalData, data, all.y=T)
}
else{
finalData=rbind(finalData, data)
}
rm(data)
gaModel25 = loadData(region, year+5, '25', 'gaModelClustered')
gaModel60 = loadData(region, year+5, '60', 'gaModelClustered')
gaModel100 = loadData(region, year+5, '100', 'gaModelClustered')
lista25 = loadData(region, year+5, '25', 'listaGA_NewClustered')
lista60 = loadData(region, year+5, '60', 'listaGA_NewClustered')
lista100 = loadData(region, year+5, '100', 'listaGA_NewClustered')
valuesGA25 = convertToNumeric(gaModel25)
valuesGA60 = convertToNumeric(gaModel60)
valuesGA100 = convertToNumeric(gaModel100)
valuesLista25 = convertToNumeric(lista25)
valuesLista60 = convertToNumeric(lista60)
valuesLista100 = convertToNumeric(lista100)
loglikeGA = c(valuesGA25, valuesGA60,valuesGA100)
loglikeLista = c(valuesLista25, valuesLista60, valuesLista100)
loglikeValues = c(loglikeGA, loglikeLista)
nameGa = c(rep("gaModelCluster",30))
nameLista = c(rep("listaCluster",30))
years = c(rep(toString(year+5),60))
regions = c(rep(region, 60))
depth25 = c(rep('25',10))
depth60 = c(rep('60',10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth25, depth60, depth100)
model = c(nameGa, nameLista)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
if (dim(finalData)[1]==0) {
finalData = merge(finalData, data, all.y=T)
}
else{
finalData=rbind(finalData, data)
}
rm(data)
}
}
# for (year in 2005:2010){
#     riData = loadRI(year)
#     loglikeRI = as.numeric(as.character(riData[9,9]))
#     model = c("RI")
#     depths= c('RI')
#     years = year
#     regions = region
#     data = data.frame(loglikeValues, model, depths, years, regions, clustered)
#     print(data)
#     finalData=rbind(finalData, data)
#     if (dim(finalData)[1]==0) {
#         finalData = merge(finalData, data, all.y=T)
#     }
#     else{
#         finalData=rbind(finalData, data)
#     }
#     rm(data)
# }
# finalData$years = factor(finalData$years)
# finalData$depths = factor(finalData$depths)
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$depths+finalData$years+finalData$regions)
summary(resultANOVA)
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$years+
finalData$regions)
summary(resultANOVA)
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$depths+finalData$regions+finalData$years)
summary(resultANOVA)
tuk = TukeyHSD(resultANOVA)
op <- par(mar = c(5,14,4,2) + 0.1)
plot(tuk,las=1)
print(tuk)
save(finalData,file="data.Rda")
load("data.Rda")
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$depths+finalData$years+finalData$regions)
summary(resultANOVA)
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$years+
finalData$regions)
summary(resultANOVA)
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$depths+finalData$regions+finalData$years)
summary(resultANOVA)
tuk = TukeyHSD(resultANOVA)
op <- par(mar = c(5,14,4,2) + 0.1)
plot(tuk,las=1)
print(tuk)
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$depths+finalData$years+finalData$regions)
summary(resultANOVA)
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$years+finalData$regions)
summary(resultANOVA)
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$depths+finalData$regions)
summary(resultANOVA)
tuk = TukeyHSD(resultANOVA)
op <- par(mar = c(5,14,4,2) + 0.1)
plot(tuk,las=1)
plot(tuk,las=1)
op <- par(mar = c(5,14,4,2) + 0.1)
plot(tuk,las=1)
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$depths+finalData$years+finalData$regions)
summary(resultANOVA)
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$depths+finalData$regions)
summary(resultANOVA)
tuk = TukeyHSD(resultANOVA)
print(tuk)
print(tuk)
op <- par(mar = c(5,14,4,2) + 0.1)
plot(tuk,las=1)
op <- par(mar = c(5,14,4,2) + 0.1)
plot(tuk,las=1)
load("data.Rda")
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$depths+finalData$years
+finalData$regions+finalData$clustered)
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$depths+finalData$years+finalData$regions)
summary(resultANOVA)
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$regions)
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$depths+finalData$regions)
summary(resultANOVA)
tuk = TukeyHSD(resultANOVA)
plot(tuk,las=1)
print(tuk)
op <- par(mar = c(0,12,4,2) + 0.1)
#Função para gerar o gráfico
plot(tuk,las=1)
---
title: 'ANOVA test'
author: "Yuri Cossich Lavinas"
date: "April 25, 2016"
output:
pdf_document:
fig_caption: yes
html_document: default
---
## Summary
O objeto é descobrir se existem variações ente os métodos e quais são as variáveis mais influentes.
Os métodos utilizados para comparação são o gaModel e a versão com listas. Para cada um dos métodos temos algumas variações nas varíaveis utilizadas. Variamos os anos (2005-2010), as regiões (Kanto, EastJapan, Touhoku e Kansai), a profundidade ( <25km, <60km, <100km) e finalmente o catálogo utilizado (JMA X métodoJanelaJMA).
## Experimental design
Vou utilizar o ANOVA para nos dados obtidos para verificar qual composição de variáveis e métodos mais influênciam no resultado final.
Para isso executei o *gaModel* e *versão com Listas* para cada conjunto de variáveis 10 vezes. Cada grupo para um método é composto por: região, ano, profundidade e catálogo. Um grupo para um cenário será chamado cenário de execução.
Após as execuções vou aplicar o ANOVA em uma data.frame composto pelos dados das **médias dos melhores indivíduos da última geração** para cada cenário de execução.
Caso uma variável esteja fora do intervalo de confiança (P < 0.05), vou aplicar novamente o ANOVA retirando essa variável do teste.
Aplico um teste post hoc nos resultados do ANOVO oara especificar quais são os grupos que diferem. O teste utilizado foi o Tukey teste.
## Statistical Analysis
Começo a análise carregando o data.frame com os dados, seguindo para a aplicação do teste ANOVA e finalizando com o uso do Tukey teste.
```{r}
#Loading data
setwd("~/Documents/estudos/unb/earthquakemodels/Zona2/dataForR")
load("data.Rda")
#Primeira vez aplicando ANOVA
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$depths+finalData$years+finalData$regions)
summary(resultANOVA)
#Segunda vez aplicando ANOVA, como a variável years influencia menos os dados foram removidos do teste ANOVA
resultANOVA = aov(finalData$loglikeValues~finalData$model+finalData$depths+finalData$regions)
summary(resultANOVA)
#Especificando quais são os grupos que diferem
tuk = TukeyHSD(resultANOVA)
#Variáveis para configuração do gráfico
par(mfrow=c(2,2))
op <- par(mar = c(0,10,4,2) + 0.1)
#Função para gerar o gráfico
plot(tuk,las=1)
#Mostrando os resultados também em texto
print(tuk)
```
op <- par(mar = c(5,12,4,2) + 0.1)
#!/usr/bin/env Rscript
#region(kanto), year(2000~2005)=>2005~2010, model (listas, ga), depth(25,60,100)
setwd("~/Documents/estudos/unb/earthquakemodels/Zona2/dataFromR")
loadData = function(region, year, depth, type){
file = paste(region,"_",year,"_LastGen",depth,type,".txt",sep="")
data = read.csv2(file, sep='\n', header=F)
return(data)
}
chooseRegion = function(i){
if (i==1) {
region="Kanto"
}
else if (i==2) {
region="Kansai"
}
else if (i==3) {
region = "Tohoku"
}
else{
region = "EastJapan"
}
return(region)
}
convertToNumeric = function(model){
values = rep(0, length(model$V1))
for (k in 1:length(model$V1)){
values[k] = as.numeric(levels(model$V1[k]))[model$V1[k]]
}
return(values)
}
loadRI = function(year){
file = paste("ri_",year,sep="")
dataRI = read.csv2(file, sep='', header=F)
return(dataRI)
}
finalData = data.frame(
setNames(replicate(5,numeric(0), simplify = F),
c("loglikeValues", "model", "depths", "years", "regions")))
for (i in 1:4) {
region = chooseRegion(i)
for (year in 2000:2005) {
gaModel25 = loadData(region, year, '25', 'gaModel')
gaModel60 = loadData(region, year, '60', 'gaModel')
gaModel100 = loadData(region, year, '100', 'gaModel')
lista25 = loadData(region, year, '25', 'listaGA_New')
lista60 = loadData(region, year, '60', 'listaGA_New')
lista100 = loadData(region, year, '100', 'listaGA_New')
valuesGA25 = convertToNumeric(gaModel25)
valuesGA60 = convertToNumeric(gaModel60)
valuesGA100 = convertToNumeric(gaModel100)
valuesLista25 = convertToNumeric(lista25)
valuesLista60 = convertToNumeric(lista60)
valuesLista100 = convertToNumeric(lista100)
loglikeGA = c(valuesGA25, valuesGA60, valuesGA100)
loglikeLista = c(valuesLista25, valuesLista60, valuesLista100)
loglikeValues = c(loglikeGA, loglikeLista)
nameGa = c(rep("gaModel",30))
nameLista = c(rep("lista",30))
years = c(rep(toString(year+5),60))
regions = c(rep(region, 60))
depth25 = c(rep('25',10))
depth60 = c(rep('60',10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth25, depth60, depth100)
model = c(nameGa, nameLista)
depths= c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model, depths, years, regions)
if (dim(finalData)[1]==0) {
finalData = merge(finalData, data, all.y=T)
}
else{
finalData=rbind(finalData, data)
}
rm(data)
gaModel25 = loadData(region, year+5, '25', 'gaModelClustered')
gaModel60 = loadData(region, year+5, '60', 'gaModelClustered')
gaModel100 = loadData(region, year+5, '100', 'gaModelClustered')
lista25 = loadData(region, year+5, '25', 'listaGA_NewClustered')
lista60 = loadData(region, year+5, '60', 'listaGA_NewClustered')
lista100 = loadData(region, year+5, '100', 'listaGA_NewClustered')
valuesGA25 = convertToNumeric(gaModel25)
valuesGA60 = convertToNumeric(gaModel60)
valuesGA100 = convertToNumeric(gaModel100)
valuesLista25 = convertToNumeric(lista25)
valuesLista60 = convertToNumeric(lista60)
valuesLista100 = convertToNumeric(lista100)
loglikeGA = c(valuesGA25, valuesGA60,valuesGA100)
loglikeLista = c(valuesLista25, valuesLista60, valuesLista100)
loglikeValues = c(loglikeGA, loglikeLista)
nameGa = c(rep("gaModelCluster",30))
nameLista = c(rep("listaCluster",30))
years = c(rep(toString(year+5),60))
regions = c(rep(region, 60))
depth25 = c(rep('25',10))
depth60 = c(rep('60',10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth25, depth60, depth100)
model = c(nameGa, nameLista)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
if (dim(finalData)[1]==0) {
finalData = merge(finalData, data, all.y=T)
}
else{
finalData=rbind(finalData, data)
}
rm(data)
}
}
# for (year in 2005:2010){
#     riData = loadRI(year)
#     loglikeRI = as.numeric(as.character(riData[9,9]))
#     model = c("RI")
#     depths= c('RI')
#     years = year
#     regions = region
#     data = data.frame(loglikeValues, model, depths, years, regions, clustered)
#     print(data)
#     finalData=rbind(finalData, data)
#     if (dim(finalData)[1]==0) {
#         finalData = merge(finalData, data, all.y=T)
#     }
#     else{
#         finalData=rbind(finalData, data)
#     }
#     rm(data)
# }
# save(finalData,file="data.Rda")
dim(finalData)
load("data.Rda")
setwd("~/Documents/estudos/unb/earthquakemodels/Zona2/dataForR")
load("data.Rda")
dim(finalData)
#!/usr/bin/env Rscript
#region(kanto), year(2000~2005)=>2005~2010, model (listas, ga), depth(25,60,100)
setwd("~/Documents/estudos/unb/earthquakemodels/Zona2/dataFromR")
loadData = function(region, year, depth, type){
file = paste(region,"_",year,"_LastGen",depth,type,".txt",sep="")
data = read.csv2(file, sep='\n', header=F)
return(data)
}
chooseRegion = function(i){
if (i==1) {
region="Kanto"
}
else if (i==2) {
region="Kansai"
}
else if (i==3) {
region = "Tohoku"
}
else{
region = "EastJapan"
}
return(region)
}
convertToNumeric = function(model){
values = rep(0, length(model$V1))
for (k in 1:length(model$V1)){
values[k] = as.numeric(levels(model$V1[k]))[model$V1[k]]
}
return(values)
}
loadRI = function(year){
file = paste("ri_",year,sep="")
dataRI = read.csv2(file, sep='', header=F)
return(dataRI)
}
finalData = data.frame(
setNames(replicate(5,numeric(0), simplify = F),
c("loglikeValues", "model", "depths", "years", "regions")))
for (i in 1:4) {
region = chooseRegion(i)
for (year in 2000:2005) {
gaModel25 = loadData(region, year, '25', 'gaModel')
gaModel60 = loadData(region, year, '60', 'gaModel')
gaModel100 = loadData(region, year, '100', 'gaModel')
lista25 = loadData(region, year, '25', 'listaGA_New')
lista60 = loadData(region, year, '60', 'listaGA_New')
lista100 = loadData(region, year, '100', 'listaGA_New')
valuesGA25 = convertToNumeric(gaModel25)
valuesGA60 = convertToNumeric(gaModel60)
valuesGA100 = convertToNumeric(gaModel100)
valuesLista25 = convertToNumeric(lista25)
valuesLista60 = convertToNumeric(lista60)
valuesLista100 = convertToNumeric(lista100)
loglikeGA = c(valuesGA25, valuesGA60, valuesGA100)
loglikeLista = c(valuesLista25, valuesLista60, valuesLista100)
loglikeValues = c(loglikeGA, loglikeLista)
nameGa = c(rep("gaModel",30))
nameLista = c(rep("lista",30))
years = c(rep(toString(year+5),60))
regions = c(rep(region, 60))
depth25 = c(rep('25',10))
depth60 = c(rep('60',10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth25, depth60, depth100)
model = c(nameGa, nameLista)
depths= c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model, depths, years, regions)
if (dim(finalData)[1]==0) {
finalData = merge(finalData, data, all.y=T)
}
else{
finalData=rbind(finalData, data)
}
rm(data)
gaModel25 = loadData(region, year+5, '25', 'gaModelClustered')
gaModel60 = loadData(region, year+5, '60', 'gaModelClustered')
gaModel100 = loadData(region, year+5, '100', 'gaModelClustered')
lista25 = loadData(region, year+5, '25', 'listaGA_NewClustered')
lista60 = loadData(region, year+5, '60', 'listaGA_NewClustered')
lista100 = loadData(region, year+5, '100', 'listaGA_NewClustered')
valuesGA25 = convertToNumeric(gaModel25)
valuesGA60 = convertToNumeric(gaModel60)
valuesGA100 = convertToNumeric(gaModel100)
valuesLista25 = convertToNumeric(lista25)
valuesLista60 = convertToNumeric(lista60)
valuesLista100 = convertToNumeric(lista100)
loglikeGA = c(valuesGA25, valuesGA60,valuesGA100)
loglikeLista = c(valuesLista25, valuesLista60, valuesLista100)
loglikeValues = c(loglikeGA, loglikeLista)
nameGa = c(rep("gaModelCluster",30))
nameLista = c(rep("listaCluster",30))
years = c(rep(toString(year+5),60))
regions = c(rep(region, 60))
depth25 = c(rep('25',10))
depth60 = c(rep('60',10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth25, depth60, depth100)
model = c(nameGa, nameLista)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
if (dim(finalData)[1]==0) {
finalData = merge(finalData, data, all.y=T)
}
else{
finalData=rbind(finalData, data)
}
rm(data)
}
}
# for (year in 2005:2010){
#     riData = loadRI(year)
#     loglikeRI = as.numeric(as.character(riData[9,9]))
#     model = c("RI")
#     depths= c('RI')
#     years = year
#     regions = region
#     data = data.frame(loglikeValues, model, depths, years, regions, clustered)
#     print(data)
#     finalData=rbind(finalData, data)
#     if (dim(finalData)[1]==0) {
#         finalData = merge(finalData, data, all.y=T)
#     }
#     else{
#         finalData=rbind(finalData, data)
#     }
#     rm(data)
# }
# save(finalData,file="data.Rda")
dim(finalData)
setwd("~/Documents/estudos/unb/earthquakemodels/Zona2/dataForR")
load("data.Rda")
dim(finalData)
