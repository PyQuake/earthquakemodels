}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors,alpha.regions = 0.1)
p + layer(grid.raster(as.raster(image)), under=T)
print(p+ layer(grid.raster(as.raster(image)), under=T))
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "20.png")
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(raw_data[1,k]))[raw_data[1,k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors,alpha.regions = 0.9)
p + layer(grid.raster(as.raster(image)), under=T)
print(p+ layer(grid.raster(as.raster(image)), under=T))
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "20.png")
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(raw_data[1,k]))[raw_data[1,k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors,alpha.regions = 1)
p + layer(grid.raster(as.raster(image)), under=T)
print(p+ layer(grid.raster(as.raster(image)), under=T, ,alpha.regions = 0.9))
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "20.png")
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(raw_data[1,k]))[raw_data[1,k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors,alpha.regions = 0.9)
p + layer(grid.raster(as.raster(image)), under=T)
print(p+ layer(grid.raster(as.raster(image)), under=T),alpha.regions = 0.9)
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "20.png")
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(raw_data[1,k]))[raw_data[1,k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors,alpha.regions = 1)
#p + layer(grid.raster(as.raster(image)), under=T)
print(p+ layer(grid.raster(as.raster(image)), under=F),alpha.regions = 0.3)
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "20.png")
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(raw_data[1,k]))[raw_data[1,k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors,alpha.regions = 1)
#p + layer(grid.raster(as.raster(image)), under=T)
print(p+ layer(grid.raster(as.raster(image)), under=F),alpha.regions = 0.1)
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "20.png")
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(raw_data[1,k]))[raw_data[1,k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors,alpha.regions = 1)
#p + layer(grid.raster(as.raster(image)), under=T)
print(p+ layer(grid.raster(as.raster(image)), under=F),alpha.regions = 0.1)
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "20.png")
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(raw_data[1,k]))[raw_data[1,k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors,alpha.regions = 1)
#p + layer(grid.raster(as.raster(image)), under=T)
print(p+ layer(grid.raster(as.raster(image)), under=F),alpha.regions = 0.1)
dev.off()
print(p)
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "20.png")
?layer
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(raw_data[1,k]))[raw_data[1,k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors)
print(p+ layer(grid.raster(as.raster(image)), under=T))
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "20.png")
?heat.colors
?levelplot
?print
?grid.raster
?as.raster
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(raw_data[1,k]))[raw_data[1,k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors)
print(p+ layer(grid.raster(as.raster(image, alpha=0.1)), under=T))
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "20.png")
?readPNG
image <- readPNG("../data/kantomap.png", bg = "transparent")
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(raw_data[1,k]))[raw_data[1,k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors, alpha.regions=0.7)
print( p+ layer(grid.raster(as.raster(image)), under=T))
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "20.png")
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(raw_data[1,k]))[raw_data[1,k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors, alpha.regions=0.6)
print( p+ layer(grid.raster(as.raster(image)), under=T))
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "20.png")
plotMatrixModel(raw_data, "semlog.png")
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(raw_data[1,k]))[raw_data[1,k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors, alpha.regions=0.6)
print( p+ layer(grid.raster(as.raster(image)), under=T))
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "semlog.png")
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(raw_data[1,k]))[raw_data[1,k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot((matrixData), col.regions = jBrewColors, alpha.regions=0.6)
print( p+ layer(grid.raster(as.raster(image)), under=T))
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep=',', header=F)
plotMatrixModel(raw_data, "comlog.png")
raw_data = read.csv2(file, sep='\n', header=F)
plotMatrixModel(raw_data, "log.png")
raw_data
raw_data[2025]
raw_data[1]
raw_data[1][1]
raw_data$V1
raw_data$V1[1]
raw_data$V1[2]
raw_data$V1[2025]
k=2-25
k=2025
matrixData[i,j] = as.numeric(levels(raw_data$V1[k]))[raw_data$V1[k]]
as.numeric(levels(raw_data$V1[k]))[raw_data$V1[k]]
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(modelData$V1[k]))[modelData$V1[k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors, alpha.regions=0.6)
print( p+ layer(grid.raster(as.raster(image)), under=T))
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep='\n', header=F)
plotMatrixModel(raw_data, "log.png")
#as.numeric(levels(raw_data$V1[k]))[raw_data$V1[k]]
#!/usr/bin/env Rscript
setwd("~/Documents/estudos/unb/earthquakemodels/code")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
#display.brewer.all()
#setwd("~/Documents/estudos/unb/earthquakemodels/code/models")
plotMatrixModel = function(modelData, fileToSave){
# TODO -- hardcoded map is BAD
image <- readPNG("../data/kantomap.png")
matrixData = matrix(nrow = 45, ncol = 45)
k = 1
for (i in 1:45){
for (j in 1:45){
matrixData[i,j] = as.numeric(levels(modelData$V1[k]))[modelData$V1[k]]
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(nrow(table(matrixData))))
p = levelplot(log(matrixData), col.regions = jBrewColors, alpha.regions=0.6)
print( p+ layer(grid.raster(as.raster(image)), under=T))
dev.off()
}
#plotMatrixModel(modelData, "a.png")
file = "testes.txt"
raw_data = read.csv2(file, sep='\n', header=F)
plotMatrixModel(raw_data, "log.png")
#as.numeric(levels(raw_data$V1[k]))[raw_data$V1[k]]
