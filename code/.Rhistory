?t.test
hist(a)
plot(a)
> kruskal.test(a,b)
a
b
?> kruskal.test
kruskal.test(a,b)
?kruskal.test
?aov
?t.test
subTabela3 = subTabela[subTabela$region=='Kanto'|subTabela$region=='EastJapan',]
subTabela3 = subTabela3[subTabela3$model=='ReducedGAModelSC'|subTabela3$model=='GAModelSC'|
subTabela3$model=='EMP-ReducedGAModelSC'|subTabela3$model=='EMP-GAModelSC',]
summary(subTabela3)
resultANOVA = aov(loglikeValues~model+years+regions , data = subTabela3)
summary(resultANOVA)
install.packages("multicomp")
install.packages("multcomp")
install.packages("ETAS")
summary(iran.quakes)
library("ETAS", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
summary(iran.quakes)
iran.cat <- catalog(iran.quakes, time.begin="1973/01/01",                    study.start="1996/01/01", study.end="2016/01/01",                    lat.range=c(25, 42), long.range=c(42, 63), mag.threshold=4.5)
iran.cat <- catalog(iran.quakes, time.begin="1973/01/01",
study.start="1996/01/01", study.end="2016/01/01",
lat.range=c(25, 42), long.range=c(42, 63), mag.threshold=4.5)
print(iran.quakes)
head(iran.quakes)
iran.cat <- catalog(iran.quakes, time.begin="1973/01/01",study.start="1996/01/01", study.end="2016/01/01",lat.range=c(25, 42), long.range=c(42, 63), mag.threshold=4.5)
install.packages("spatstat")
iran.cat <- catalog(iran.quakes, time.begin="1973/01/01",study.start="1996/01/01", study.end="2016/01/01",lat.range=c(25, 42), long.range=c(42, 63), mag.threshold=4.5)
jpoly <- list(long=c(134.0, 137.9, 143.1, 144.9, 147.8,
137.8, 137.4, 135.1, 130.6), lat=c(31.9, 33.0, 33.2,
35.2, 41.3, 44.2, 40.2, 38.0, 35.4))
jap.cat <- catalog(jap.quakes, time.begin="1966-01-01",
study.start="1970-01-01", study.end="2010-01-01",
region.poly=jpoly, mag.threshold=4.5)
install.packages("spatstat")
setRepositories()
install.packages("spatstat")
library(ETAS)
iran.cat <- catalog(iran.quakes, time.begin="1973/01/01",study.start="1996/01/01", study.end="2016/01/01",lat.range=c(25, 42), long.range=c(42, 63), mag.threshold=4.5)
install.packages("spatstat")
install.packages("spatstat")
iran.cat <- catalog(iran.quakes, time.begin="1973/01/01",study.start="1996/01/01", study.end="2016/01/01",lat.range=c(25, 42), long.range=c(42, 63), mag.threshold=4.5)
library(ETAS)
summary(iran.quakes)
library(ETAS)
install.packages("ETAS")
library(ETAS)
summary(iran.quakes)
iran.cat <- catalog(iran.quakes, time.begin="1973/01/01",study.start="1996/01/01", study.end="2016/01/01",lat.range=c(25, 42), long.range=c(42, 63), mag.threshold=4.5)
print(iran.cat)
plot(iran.cat)
param01 <- c(0.46, 0.23, 0.022, 2.8, 1.12, 0.012, 2.4, 0.35)
iran.fit <- etas(iran.cat, param0=param01, no.itr=5)
iran.fit
subTabela = finalData[finalData$regions=='Kanto',]
subTabela = subTabela[subTabela$years!='2009'&subTabela$years!='2010',]
setwd("~/Documents/estudos/unb/earthquakemodels/Zona2/DataFromR")
load("newdata.Rda")
subTabela = finalData[finalData$regions=='Kanto',]
subTabela = subTabela[subTabela$years!='2009'&subTabela$years!='2010',]
summary(subTabela)
subTabela = subTabela[subTabela$model!='Emp-GAModel'&subTabela$model!='Emp-ReducedGAModel'&
subTabela$model!='Emp-GAModelWindow'&subTabela$model!='Emp-ReducedGAModelWindow',
subTabela$model!='Emp-GAModelSLC'&subTabela$model!='Emp-ReducedGAModelSLC',
]
subTabela = finalData[finalData$regions=='Kanto',]
subTabela = subTabela[subTabela$years!='2009'&subTabela$years!='2010',]
subTabela$model=='GAModel'
subTabela$model!='GAModel'
subTabela = subTabela[subTabela$model!='Emp-GAModel'&subTabela$model!='Emp-ReducedGAModel'&
subTabela$model!='Emp-GAModelWindow'&subTabela$model!='Emp-ReducedGAModelWindow'&
subTabela$model!='Emp-GAModelSLC'&subTabela$model!='Emp-ReducedGAModelSLC'
,]
summary(subTabela)
subTabela = finalData[finalData$regions=='Kanto',]
subTabela = subTabela[subTabela$years!='2009'&subTabela$years!='2010',]
summary(subTabela)
levels(finalData$model)
setwd("~/Documents/estudos/unb/earthquakemodels/code/")
chooseRegion = function(i){
if (i==1) {
region="Kanto"
}
else if (i==2) {
region="Kansai"
}
else if (i==3) {
region = "Tohoku"
}
else{
region = "EastJapan"
}
return(region)
}
region = chooseRegion(1)
for (year in 2005:2008){
#gamodelpar
gaModelPar100 = loadData('parallel-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("GAModelPar",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#parallelList
gaModelPar100 = loadData('parallelList-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("ReducedGAModelPar",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#sc-parallel-random
gaModelPar100 = loadData('sc-parallel-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("GAModelParSC",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#sc-parallelList-
gaModelPar100 = loadData('sc-parallelList-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("ReducedGAModelParSC",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
}
summary(finalData)
subTabela = finalData[finalData$regions=='Kanto',]
subTabela = subTabela[subTabela$years!='2009'&subTabela$years!='2010',]
levels(finalData$model)
summary(finalData)
loadData = function(type, region, year, depth){
file = paste('loglike/',type,region,'_',depth,'_',year,".txt",sep="")
data = read.csv2(file, sep='\n', header=F)
return(data)
}
region = chooseRegion(1)
for (year in 2005:2008){
#gamodelpar
gaModelPar100 = loadData('parallel-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("GAModelPar",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#parallelList
gaModelPar100 = loadData('parallelList-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("ReducedGAModelPar",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#sc-parallel-random
gaModelPar100 = loadData('sc-parallel-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("GAModelParSC",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#sc-parallelList-
gaModelPar100 = loadData('sc-parallelList-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("ReducedGAModelParSC",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
}
summary(finalData)
subTabela = finalData[finalData$regions=='Kanto',]
subTabela = subTabela[subTabela$years!='2009'&subTabela$years!='2010',]
setwd("~/Documents/estudos/unb/earthquakemodels/code/")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
region = chooseRegion(1)
for (year in 2005:2008){
#gamodelpar
gaModelPar100 = loadData('parallel-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("GAModelPar",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#parallelList
gaModelPar100 = loadData('parallelList-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("ReducedGAModelPar",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#sc-parallel-random
gaModelPar100 = loadData('sc-parallel-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("GAModelParSC",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#sc-parallelList-
gaModelPar100 = loadData('sc-parallelList-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("ReducedGAModelParSC",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
}
summary(finalData)
convertToNumeric = function(model){
values = rep(0, length(model$V1))
for (k in 1:length(model$V1)){
values[k] = as.numeric(levels(model$V1[k]))[model$V1[k]]
}
return(values)
}
region = chooseRegion(1)
for (year in 2005:2008){
#gamodelpar
gaModelPar100 = loadData('parallel-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("GAModelPar",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#parallelList
gaModelPar100 = loadData('parallelList-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("ReducedGAModelPar",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#sc-parallel-random
gaModelPar100 = loadData('sc-parallel-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("GAModelParSC",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#sc-parallelList-
gaModelPar100 = loadData('sc-parallelList-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("ReducedGAModelParSC",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
}
summary(finalData)
mean(finalData$loglikeValues[finalData$model=='GAModelPar'&finalData$year=='2005'])
setwd("~/Documents/estudos/unb/earthquakemodels/code/")
options(scipen=999)
library(grid)
library(latticeExtra)
library(png)
library(grDevices)
library(RColorBrewer)
loadData = function(type, region, year, depth){
file = paste('loglike/',type,region,'_',depth,'_',year,".txt",sep="")
data = read.csv2(file, sep='\n', header=F)
return(data)
}
convertToNumeric = function(model){
values = rep(0, length(model$V1))
for (k in 1:length(model$V1)){
values[k] = as.numeric(levels(model$V1[k]))[model$V1[k]]
}
return(values)
}
calcMedia = function(type, year, depth, region,r,c){
soma = rep(0, r*c)
for(i in 1:10){
file = paste(type,'/',region,'_',depth,'_',year,i-1,".txt",sep="")
raw_data = read.csv2(file, sep='\n', header=F)
for (k in 1:length(raw_data$V1)){
value = as.numeric(levels(raw_data$V1[k]))[raw_data$V1[k]]
soma[k]=soma[k]+value
}
}
return(soma/10)
}
plotMatrixModel = function(modelData, fileToSave, r, c){
# TODO -- hardcoded map is BAD
matrixData = matrix(nrow = r, ncol = c)
k = 1
for (i in 1:r){
for (j in 1:c){
if(is.na(modelData[k])==T){
value=0
}
else{
value = modelData[k]
if (value > 12){
value = 12
}
}
matrixData[i,j] = value
k = k + 1
}
}
png(fileToSave, width = 800, height = 800)
jBrewColors <- rev(heat.colors(16))
p = levelplot((matrixData), col.regions = jBrewColors, alpha.regions=0.6)
grid.raster(as.raster(readPNG(imagePath)))
print( p+ layer(grid.raster(as.raster(readPNG(imagePath))), under=T))
dev.off()
}
plotModelsByYears= function(type, depth){
year=2005
#modelo
while(year<=2008){
region="Kanto"
saveFile = paste("./heatMap/",type,region,"_",depth,'_',year,".png",sep="")
mediaKanto=calcMedia(type=type,year=year, region=region, depth=depth, 45,45)
imagePath<<-"../data/kantomap.png"
plotMatrixModel(mediaKanto, saveFile, 45, 45)
year=year+1
}
}
setwd("~/Documents/estudos/unb/earthquakemodels/Zona2/DataFromR")
load("newdata.Rda")
summary(finalData)
setwd("~/Documents/estudos/unb/earthquakemodels/code/")
chooseRegion = function(i){
if (i==1) {
region="Kanto"
}
else if (i==2) {
region="Kansai"
}
else if (i==3) {
region = "Tohoku"
}
else{
region = "EastJapan"
}
return(region)
}
region = chooseRegion(1)
for (year in 2005:2008){
#gamodelpar
gaModelPar100 = loadData('parallel-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("GAModelPar",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#parallelList
gaModelPar100 = loadData('parallelList-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("ReducedGAModelPar",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#sc-parallel-random
gaModelPar100 = loadData('sc-parallel-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("GAModelParSC",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
#sc-parallelList-
gaModelPar100 = loadData('sc-parallelList-random', region, year, '100')
valuesGAPar100 = convertToNumeric(gaModelPar100)
loglikeValues = c(valuesGAPar100)
nameGa = c(rep("ReducedGAModelParSC",10))
years = c(rep(toString(year),10))
regions = c(rep(region, 10))
depth100 = c(rep('100',10))
depthsAmodel = c(depth100)
model = c(nameGa)
depths = c(depthsAmodel, depthsAmodel)
data = data.frame(loglikeValues, model,depths, years, regions)
finalData=rbind(finalData, data)
rm(data)
}
summary(finalData)
