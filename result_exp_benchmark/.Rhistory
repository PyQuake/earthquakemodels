p10<- ggplot(means10, aes(k, min, color = f, group = means10$f))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p10$labels$colour <- "Function"
p10$labels$title <- "10 dimensions"
p20<- ggplot(means10, aes(k, min, color = f, group = means20$f))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p20$labels$colour <- "Function"
p20$labels$title <- "20 dimensions"
p40<- ggplot(means40, aes(k, min, color = f, group = means40$f))+
# geom_ribbon(aes(ymin = 0, ymax = means40$min, fill = means40$f), alpha = 0.3)+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p40$labels$colour <- "Function"
p40$labels$title <- "40 dimensions"
grid.arrange(arrangeGrob(p10+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
p20+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
p40+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
nrow=3,
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob("Function"),
bottom = textGrob("Tournament size")
)
)
}
# k_min_plot(means10, means20, means40, k_interval = c(2,3))
# k_min_plot(means10, means20, means40, log = TRUE)
#function to plot f versus min value given an interval (k goes in graph)
f_min_plot <- function(data10, data20, data40, k_interval = NULL, f_interval = NULL){
means10 <- k_subsetting(data10, k_interval)
means20 <- k_subsetting(data20, k_interval)
means40 <- k_subsetting(data40, k_interval)
means10 <- f_subsetting(means10, f_interval)
means20 <- f_subsetting(means20, f_interval)
means40 <- f_subsetting(means40, f_interval)
p10<- ggplot(means10, aes(f, min, color = k, group = means10$k))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p10$labels$colour <- "Tour. size"
p10$labels$title <- "10 dimensions"
p20<- ggplot(means10, aes(f, min, color = k, group = means20$k))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p20$labels$colour <- "Tour. size"
p20$labels$title <- "20 dimensions"
p40<- ggplot(means40, aes(f, min, color = k, group = means40$k))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p40$labels$colour <- "Tour. size"
p40$labels$title <- "40 dimensions"
grid.arrange(arrangeGrob(p10+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
p20+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
p40+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
nrow=3,
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob(" Tournament size"),
bottom = textGrob("Function")))
}
# f_min_plot(means10, means20, means40, k_interval = c(2,5,10), f_interval = c(2,5,10))
# processing data
## getting data of only the last gen
ddd10 <- loadData()
# Loading all data into a huge data frame:
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
# setwd
setwd("~/Documents/estudos/earthquakemodels/result_exp_benchmark/")
# load data
loadData <- function(){
workdir <- paste0("results_pseudo-adaptative/")
ddd <- NULL
for (j in 1:24) {
dd <- NULL
for (i in 2:23) {
d <- read.csv(paste0(workdir,"f",j,"_dim_40_tournsize_",i,".txt"),header = TRUE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
k_subsetting <- function(data, k_interval = NULL){
if (!is.null(k_interval)){
data <- data[k %in% c(k_interval)]
}
else{
data <- data
}
}
f_subsetting <- function(data, f_interval = NULL){
if (!is.null(f_interval)){
data <- data[f %in% c(f_interval)]
}
else{
data <- data
}
}
#function to plot k versus min value given an interval (function goes in graph)
k_min_plot <- function(data10, data20, data40, k_interval = NULL, f_interval = NULL){
means10 <- k_subsetting(data10, k_interval)
means20 <- k_subsetting(data20, k_interval)
means40 <- k_subsetting(data40, k_interval)
means10 <- f_subsetting(means10, f_interval)
means20 <- f_subsetting(means20, f_interval)
means40 <- f_subsetting(means40, f_interval)
p10<- ggplot(means10, aes(k, min, color = f, group = means10$f))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p10$labels$colour <- "Function"
p10$labels$title <- "10 dimensions"
p20<- ggplot(means10, aes(k, min, color = f, group = means20$f))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p20$labels$colour <- "Function"
p20$labels$title <- "20 dimensions"
p40<- ggplot(means40, aes(k, min, color = f, group = means40$f))+
# geom_ribbon(aes(ymin = 0, ymax = means40$min, fill = means40$f), alpha = 0.3)+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p40$labels$colour <- "Function"
p40$labels$title <- "40 dimensions"
grid.arrange(arrangeGrob(p10+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
p20+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
p40+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
nrow=3,
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob("Function"),
bottom = textGrob("Tournament size")
)
)
}
# k_min_plot(means10, means20, means40, k_interval = c(2,3))
# k_min_plot(means10, means20, means40, log = TRUE)
#function to plot f versus min value given an interval (k goes in graph)
f_min_plot <- function(data10, data20, data40, k_interval = NULL, f_interval = NULL){
means10 <- k_subsetting(data10, k_interval)
means20 <- k_subsetting(data20, k_interval)
means40 <- k_subsetting(data40, k_interval)
means10 <- f_subsetting(means10, f_interval)
means20 <- f_subsetting(means20, f_interval)
means40 <- f_subsetting(means40, f_interval)
p10<- ggplot(means10, aes(f, min, color = k, group = means10$k))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p10$labels$colour <- "Tour. size"
p10$labels$title <- "10 dimensions"
p20<- ggplot(means10, aes(f, min, color = k, group = means20$k))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p20$labels$colour <- "Tour. size"
p20$labels$title <- "20 dimensions"
p40<- ggplot(means40, aes(f, min, color = k, group = means40$k))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p40$labels$colour <- "Tour. size"
p40$labels$title <- "40 dimensions"
grid.arrange(arrangeGrob(p10+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
p20+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
p40+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
nrow=3,
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob(" Tournament size"),
bottom = textGrob("Function")))
}
# f_min_plot(means10, means20, means40, k_interval = c(2,5,10), f_interval = c(2,5,10))
# processing data
## getting data of only the last gen
ddd_pseudo <- loadData()
# Loading all data into a huge data frame:
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
# setwd
setwd("~/Documents/estudos/earthquakemodels/result_exp_benchmark/")
# load data
loadData <- function(){
workdir <- paste0("results_pseudo-adaptative/")
ddd <- NULL
for (j in 1:24) {
dd <- NULL
for (i in 2:20) {
d <- read.csv(paste0(workdir,"f",j,"_dim_40_tournsize_",i,".txt"),header = TRUE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
k_subsetting <- function(data, k_interval = NULL){
if (!is.null(k_interval)){
data <- data[k %in% c(k_interval)]
}
else{
data <- data
}
}
f_subsetting <- function(data, f_interval = NULL){
if (!is.null(f_interval)){
data <- data[f %in% c(f_interval)]
}
else{
data <- data
}
}
#function to plot k versus min value given an interval (function goes in graph)
k_min_plot <- function(data10, data20, data40, k_interval = NULL, f_interval = NULL){
means10 <- k_subsetting(data10, k_interval)
means20 <- k_subsetting(data20, k_interval)
means40 <- k_subsetting(data40, k_interval)
means10 <- f_subsetting(means10, f_interval)
means20 <- f_subsetting(means20, f_interval)
means40 <- f_subsetting(means40, f_interval)
p10<- ggplot(means10, aes(k, min, color = f, group = means10$f))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p10$labels$colour <- "Function"
p10$labels$title <- "10 dimensions"
p20<- ggplot(means10, aes(k, min, color = f, group = means20$f))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p20$labels$colour <- "Function"
p20$labels$title <- "20 dimensions"
p40<- ggplot(means40, aes(k, min, color = f, group = means40$f))+
# geom_ribbon(aes(ymin = 0, ymax = means40$min, fill = means40$f), alpha = 0.3)+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p40$labels$colour <- "Function"
p40$labels$title <- "40 dimensions"
grid.arrange(arrangeGrob(p10+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
p20+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
p40+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
nrow=3,
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob("Function"),
bottom = textGrob("Tournament size")
)
)
}
# k_min_plot(means10, means20, means40, k_interval = c(2,3))
# k_min_plot(means10, means20, means40, log = TRUE)
#function to plot f versus min value given an interval (k goes in graph)
f_min_plot <- function(data10, data20, data40, k_interval = NULL, f_interval = NULL){
means10 <- k_subsetting(data10, k_interval)
means20 <- k_subsetting(data20, k_interval)
means40 <- k_subsetting(data40, k_interval)
means10 <- f_subsetting(means10, f_interval)
means20 <- f_subsetting(means20, f_interval)
means40 <- f_subsetting(means40, f_interval)
p10<- ggplot(means10, aes(f, min, color = k, group = means10$k))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p10$labels$colour <- "Tour. size"
p10$labels$title <- "10 dimensions"
p20<- ggplot(means10, aes(f, min, color = k, group = means20$k))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p20$labels$colour <- "Tour. size"
p20$labels$title <- "20 dimensions"
p40<- ggplot(means40, aes(f, min, color = k, group = means40$k))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p40$labels$colour <- "Tour. size"
p40$labels$title <- "40 dimensions"
grid.arrange(arrangeGrob(p10+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
p20+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
p40+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
nrow=3,
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob(" Tournament size"),
bottom = textGrob("Function")))
}
# f_min_plot(means10, means20, means40, k_interval = c(2,5,10), f_interval = c(2,5,10))
# processing data
## getting data of only the last gen
ddd_pseudo <- loadData()
source('~/Documents/estudos/coursera/ExData_Plotting1/plot4.R')
setwd("~/Documents/estudos/coursera/ExData_Plotting1")
source('~/Documents/estudos/coursera/ExData_Plotting1/plot4.R')
setwd("~/Documents/estudos/earthquakemodels/result_exp_benchmark/")
setwd("~/Documents/estudos/earthquakemodels/result_exp_benchmark/")
# Loading all data into a huge data frame:
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
# setwd
setwd("~/Documents/estudos/earthquakemodels/result_exp_benchmark/")
# load data
loadData <- function(){
workdir <- paste0("results_pseudo-adaptative/")
ddd <- NULL
for (j in 1:24) {
dd <- NULL
for (i in 2:20) {
d <- read.csv(paste0(workdir,"f",j,"_dim_40_tournsize_",i,".txt"),header = TRUE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
k_subsetting <- function(data, k_interval = NULL){
if (!is.null(k_interval)){
data <- data[k %in% c(k_interval)]
}
else{
data <- data
}
}
f_subsetting <- function(data, f_interval = NULL){
if (!is.null(f_interval)){
data <- data[f %in% c(f_interval)]
}
else{
data <- data
}
}
#function to plot k versus min value given an interval (function goes in graph)
k_min_plot <- function(data40, k_interval = NULL, f_interval = NULL){
means40 <- k_subsetting(data40, k_interval)
means40 <- f_subsetting(means40, f_interval)
p40<- ggplot(means40, aes(k, min, color = f, group = means40$f))+
# geom_ribbon(aes(ymin = 0, ymax = means40$min, fill = means40$f), alpha = 0.3)+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p40$labels$colour <- "Function"
p40$labels$title <- "40 dimensions"
grid.arrange(arrangeGrob(p40+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob("Function"),
bottom = textGrob("Tournament size")
)
)
}
# k_min_plot(means10, means20, means40, k_interval = c(2,3))
# k_min_plot(means10, means20, means40, log = TRUE)
#function to plot f versus min value given an interval (k goes in graph)
f_min_plot <- function(data40, k_interval = NULL, f_interval = NULL){
means40 <- k_subsetting(data40, k_interval)
means40 <- f_subsetting(means40, f_interval)
p40<- ggplot(means40, aes(f, min, color = k, group = means40$k))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p40$labels$colour <- "Tour. size"
p40$labels$title <- "40 dimensions"
grid.arrange(arrangeGrob(p40+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob(" Tournament size"),
bottom = textGrob("Function")))
}
f_min_plot <- function(ddd_pseudo, k_interval = NULL, f_interval = NULL)
)
# Loading all data into a huge data frame:
require(data.table)
require(ggplot2)
require(ggthemes)
require(scales)
require(gridExtra)
require(grid)
# setwd
setwd("~/Documents/estudos/earthquakemodels/result_exp_benchmark/")
# load data
loadData <- function(){
workdir <- paste0("results_pseudo-adaptative/")
ddd <- NULL
for (j in 1:24) {
dd <- NULL
for (i in 2:20) {
d <- read.csv(paste0(workdir,"f",j,"_dim_40_tournsize_",i,".txt"),header = TRUE)
names(d) <- c("gen","min","mean","max","sd","rep")
k <- rep(i,nrow(d))
d <- cbind(d,k)
dd <- rbind(dd,d)
}
f <- rep(j,nrow(dd))
dd <- cbind(dd,f)
ddd <- rbind(ddd,dd)
}
return (ddd)
}
k_subsetting <- function(data, k_interval = NULL){
if (!is.null(k_interval)){
data <- data[k %in% c(k_interval)]
}
else{
data <- data
}
}
f_subsetting <- function(data, f_interval = NULL){
if (!is.null(f_interval)){
data <- data[f %in% c(f_interval)]
}
else{
data <- data
}
}
#function to plot k versus min value given an interval (function goes in graph)
k_min_plot <- function(data40, k_interval = NULL, f_interval = NULL){
means40 <- k_subsetting(data40, k_interval)
means40 <- f_subsetting(means40, f_interval)
p40<- ggplot(means40, aes(k, min, color = f, group = means40$f))+
# geom_ribbon(aes(ymin = 0, ymax = means40$min, fill = means40$f), alpha = 0.3)+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p40$labels$colour <- "Function"
p40$labels$title <- "40 dimensions"
grid.arrange(arrangeGrob(p40+theme(axis.title.y = element_blank(),axis.title.x = element_blank()),
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob("Function"),
bottom = textGrob("Tournament size")
)
)
}
# k_min_plot(means10, means20, means40, k_interval = c(2,3))
# k_min_plot(means10, means20, means40, log = TRUE)
#function to plot f versus min value given an interval (k goes in graph)
f_min_plot <- function(data40, k_interval = NULL, f_interval = NULL){
means40 <- k_subsetting(data40, k_interval)
means40 <- f_subsetting(means40, f_interval)
p40<- ggplot(means40, aes(f, min, color = k, group = means40$k))+
geom_point(col = 'red')+
geom_line()+
scale_color_gradient()
p40$labels$colour <- "Tour. size"
p40$labels$title <- "40 dimensions"
grid.arrange(arrangeGrob(p40+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()),
left = textGrob("Optimum Value found", rot = 90),
top  = textGrob(" Tournament size"),
bottom = textGrob("Function")))
}
# processing data
## getting data of only the last gen
ddd_pseudo <- loadData()
f_min_plot(ddd_pseudo, k_interval = NULL, f_interval = NULL)
group <- as.data.table(ddd_pseudo)
ddd40 <- group[group[, .I[gen == max(gen)], by=list(rep, k, f)]$V1]
means40 <- aggregate(ddd40, list(k = ddd40$k, f = ddd40$f), mean)
means40 <- as.data.table(means40)
f_min_plot(means40, k_interval = NULL, f_interval = NULL)
k_min_plot(means40, k_interval = NULL, f_interval = NULL)
k_min_plot(means40, k_interval = NULL, f_interval = c(1))
for (i in 1:20){
k_min_plot(means40, k_interval = NULL, f_interval = c(i))
}
