df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
mean=createMeanFromExecBenchmarks('F10_2', 10)
setwd("~/Documents/estudos/master-unb/earthquakemodels/result_exp_benchmark/gaBenchmarksStudy/")
library(knitr)
library(ggplot2)
library(ggplot2)
library(gridExtra)
# create function to find the mean of the 40 execs
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
vectorAuxMean[i] = data$min[200]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
mean=createMeanFromExecBenchmarks('F10_2', 10)
mean=createMeanFromExecBenchmarks('F2_2', 10)
mean=createMeanFromExecBenchmarks('F2_2', 0)
mean=createMeanFromExecBenchmarks('F2_2', 2)
a=loadDataBenchmarksF4_F24("f2_2",0)
a=loadDataBenchmarksF1_F3("f2_2",2)
a=loadDataBenchmarksF1_F3("f2_2",0)
loadDataBenchmarksF4_F24 = function(type, i){
filename = paste(type,'_',i,'.txt',sep='')
print(filename)
data = read.csv(file = filename, header = T, sep = '\t', skip=2)
return(data)
}
loadDataBenchmarksF1_F3 = function(type, i){
filename = paste(type,'_',i,'.txt',sep='')
print(filename)
data = read.csv(file = filename, header = T, sep = '\t')
return(data)
}
a=loadDataBenchmarksF4_F24("f2_2",0)
a
head(a)
loadDataBenchmarksF1_F3 = function(type, i){
filename = paste(type,'_',i,'.txt',sep='')
print(filename)
data = read.csv(file = filename, header = T, sep = '\t')
return(data)
}
a=loadDataBenchmarksF1_F3("f2_2",0)
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
vectorAuxMean[i] = data$min[200]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
mean=createMeanFromExecBenchmarks('F2_2', 2)
mean=createMeanFromExecBenchmarks('F10_2', 10)
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
vectorAuxMean[i] = data$min[200]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
mean=createMeanFromExecBenchmarks('F10_2', 10)
loadDataBenchmarksF4_F24 = function(type, i){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t', skip=2)
return(data)
}
loadDataBenchmarksF1_F3 = function(type, i){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t')
return(data)
}
setwd("~/Documents/estudos/master-unb/earthquakemodels/result_exp_benchmark/gaBenchmarksStudy/")
mean=createMeanFromExecBenchmarks('F10_2', 10)
findMaxBenchmarks = function(benchmarck_index_function){
df<-data.frame()
for (i in 2:25){
name_function=paste('F',benchmarck_index_function,'_',i,sep='')
aux<-createMeanFromExecBenchmarks(name_function, benchmarck_index_function)
df<-rbind(df, aux)
}
return(df)
}
teste = findMaxBenchmarks(1)
mean=createMeanFromExecBenchmarks('F1_2', 0)
findMaxBenchmarks = function(benchmarck_index_function){
df<-data.frame()
for (i in 2:25){
name_function=paste('F',benchmarck_index_function,'_',i,sep='')
aux<-createMeanFromExecBenchmarks(name_function, benchmarck_index_function)
df<-rbind(df, aux)
}
return(df)
}
teste = findMaxBenchmarks(1)
findMaxBenchmarks = function(benchmarck_index_function){
df<-data.frame()
for (i in 2:25){
name_function=paste('F',benchmarck_index_function,'_',i,sep='')
aux<-createMeanFromExecBenchmarks(name_function, benchmarck_index_function)
df<-rbind(df, aux)
}
return(df)
}
teste = findMaxBenchmarks(1)
teste
findMaxBenchmarks = function(benchmarck_index_function){
df<-data.frame()
for (i in 2:25){
name_function=paste('F',benchmarck_index_function,'_',i,sep='')
aux<-createMeanFromExecBenchmarks(name_function, benchmarck_index_function)
df<-rbind(df, aux)
}
return(df)
}
teste = findMaxBenchmarks(1)
create function to read data with paste - benchmarks
#create function to read data with paste - benchmarks
loadDataBenchmarksF4_F24 = function(type, i){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t', skip=2)
return(data)
}
loadDataBenchmarksF1_F3 = function(type, i){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t')
return(data)
}
# # create function to find the mean of the 40 execs
# createMeanFromExecGA = function (name_function, j){
#     vectorAuxMean = c(1:40)
#     for (i in 1:40) {
#         if (j == 2){
#             data=loadDataGA_11_25(name_function,i-1)
#         }
#         else if (j<=10) {
#             data=loadDataGA_2_10(name_function,i-1)
#         }
#         else{
#             data=loadDataGA_11_25(name_function,i-1)
#         }
#         vectorAuxMean[i] = data$max[200]
#     }
#     aux = t.test(vectorAuxMean)
#     df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
#     names(df) <- c('mean', 'std', 'five', 'ninetyFive')
#     return(df)
# }
#
#
# # create function to find the max value from a function - the mean of the last gen that counts
# # here im getting the values from the tournsize
# findMaxGA = function(){
#     df<-data.frame()
#     #TODO change from 24 to 25
#     for (i in 2:24){
#         name_function=paste('ga_',i,sep='')
#         aux<-createMeanFromExecGA(name_function, i)
#         df<-rbind(df, aux)
#     }
#     return(df)
# }
#
# # create function to find the max value and where it is located
# findMaxPosGA = function (){
#     vectorAuxMax=findMaxGA()
#     p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=1:nrow(vectorAuxMax))) +
#         geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
#         geom_line() +
#         geom_point() +
#         xlab('tournament size') +
#         ylab('function mean value') +
#         ggtitle(paste("GAModel",' means and std' , sep=''))
#     print(p1+ theme(legend.position="none"))
#
#     p1<- ggplot(vectorAuxMax, aes(1:nrow(vectorAuxMax), mean, colour=vectorAuxMax$mean)) +
#         # geom_errorbar(aes(ymin=vectorAuxMax$mean-vectorAuxMax$std, ymax=vectorAuxMax$mean+vectorAuxMax$std), width=.1) +
#         geom_line() +
#         geom_point() +
#         xlab('tournament size') +
#         ylab('function mean value') +
#         ggtitle(paste("GA",' means and C.I.' , sep='')) +
#         geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
#     print(p1+ theme(legend.position="none"))
# }
# findMaxPosGA()
# create function to find the mean of the 40 execs
createMeanFromExecBenchmarks = function (name_function, j){
vectorAuxMean = c(1:40)
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
vectorAuxMean[i] = data$min[200]
}
aux = t.test(vectorAuxMean)
df <-data.frame(mean(vectorAuxMean), sd(vectorAuxMean), aux$conf.int[1], aux$conf.int[2])
names(df) <- c('mean', 'std', 'five', 'ninetyFive')
return(df)
}
mean=createMeanFromExecBenchmarks('F1_2', 0)
tail(a)
setwd("~/Documents/estudos/master-unb/earthquakemodels/result_exp_benchmark/gaBenchmarksStudy/")
#create function to read data with paste - header problems - GA
# loadDataGA_2_10 = function(type, i){
#     filename = paste(type,'_',i,'.txt',sep='')
#     data = read.csv(file = filename, header = T, sep = '\t', skip=1)
#     return(data)
# }
#
# # create function to read data with paste - header problems - GA
# loadDataGA_11_25 = function(type, i){
#     filename = paste(type,'_',i,'.txt',sep='')
#     data = read.csv(file = filename, header = T, sep = '\t', skip=3)
#     return(data)
# }
#
#create function to read data with paste - benchmarks
loadDataBenchmarksF4_F24 = function(type, i){
filename = paste(type,'_',i,'.txt',sep='')
print(filename)
data = read.csv(file = filename, header = T, sep = '\t', skip=2)
return(data)
}
loadDataBenchmarksF1_F3 = function(type, i){
filename = paste(type,'_',i,'.txt',sep='')
print(filename)
data = read.csv(file = filename, header = T, sep = '\t')
return(data)
}
#
# createConvergencyDataGA = function (name_function, j){
#     df = data.frame()
#     for (i in 1:40) {
#         if (j == 2){
#             data=loadDataGA_11_25(name_function,i-1)
#         }
#         else if (j<=10) {
#             data=loadDataGA_2_10(name_function,i-1)
#         }
#         else{
#             data=loadDataGA_11_25(name_function,i-1)
#         }
#         df <- rbind(df, data)
#     }
#     minimum = (-1)*tapply(df$max, INDEX = df$gen, FUN = mean)
#     # std = tapply(df$std, INDEX = df$gen, FUN = mean)
#     # std = pmin(std, 200)
#     gen = c(1:500)
#     df = data.frame(minimum, std, gen)
#     df
# }
#
# plotforKGA = function(){
#     # for (j in 2:24){
#     j=5
#     name_function = paste('GA_',j, sep='')
#     # print(name_function)
#     vectorAuxMax = createConvergencyDataGA(name_function, j)
#     p1<- ggplot(vectorAuxMax, aes(gen, minimum, colour=vectorAuxMax$minimum)) +
#         # geom_errorbar(aes(ymin=vectorAuxMax$minimum-vectorAuxMax$std, ymax=vectorAuxMax$minimum+vectorAuxMax$std), width=.1) +
#         geom_line() +
#         geom_point() +
#         xlab('Number of generations') +
#         ylab('function mean value') +
#         ggtitle(name_function) #+
#     # geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
#     print(p1+ theme(legend.position="none"))
#     # }
#
# }
#
# plotforKGA()
createConvergencyDataBenchmarks = function (name_function, j){
df = data.frame()
for (i in 1:40) {
if(j<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
df <- rbind(df, data)
}
minimum = tapply(df$min, INDEX = df$gen, FUN = mean)
std = tapply(df$std, INDEX = df$gen, FUN = mean)
# std = pmin(std, 200)
gen = c(1:500)
df = data.frame(minimum, std, gen)
df
}
id = c(18, 15,13, 22, 15, 9, 7, 8, 20, 16, 11, 3, 12, 12, 16, 3, 7, 23, 7, 17, 23, 18, 6, 22)
plotforKBenchmarks = function(k){
# for (j in 2:25){
j=id[k]
name_function = paste('F',k,'_',j, sep='')
vectorAuxMax = createConvergencyDataBenchmarks(name_function, k)
p1<- ggplot(vectorAuxMax, aes(gen, minimum, colour=vectorAuxMax$minimum)) +
# geom_errorbar(aes(ymin=vectorAuxMax$minimum-vectorAuxMax$std, ymax=vectorAuxMax$minimum+vectorAuxMax$std), width=.1) +
geom_line() +
geom_point() +
xlab('Number of generations') +
ylab('function mean value') +
ggtitle(name_function) #+
# geom_segment(aes(x = 1:nrow(vectorAuxMax), y = vectorAuxMax$five, xend = 1:nrow(vectorAuxMax), yend=vectorAuxMax$ninetyFive))
print(p1+ theme(legend.position="none"))
# }
}
for (i in 1:24){
plotforKBenchmarks(i)
}
loadDataBenchmarksF1_F3 = function(type, i,  nrows = 500){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t',  nrows = nrows)
return(data)
}
a=loadDataBenchmarksF4_F24("f2_2",0)
a$gen[501]
tail(a)
a=loadDataBenchmarksF1_F3("f2_2",0)
a$gen[501]
head(a)
tail(a)
for (i in 1:24){
ablines = c(1:24)
if(i<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
ablines[i] = data$gen[501]
}
for (i in 1:24){
ablines = c(1:24)
name_function = paste('F',i,'_',i, sep='')
if(i<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
ablines[i] = data$gen[501]
}
for (i in 1:24){
ablines = c(1:24)
setwd("~/Documents/estudos/master-unb/earthquakemodels/result_exp_benchmark/gaBenchmarksStudy/")
name_function = paste('F',i,'_',i, sep='')
if(i<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
ablines[i] = data$gen[501]
}
teste = findMaxBenchmarks(1)
setwd("~/Documents/estudos/master-unb/earthquakemodels/result_exp_benchmark/gaBenchmarksStudy/")
for (i in 1:24){
ablines = c(1:24)
name_function = paste('F',i,'_',i, sep='')
if(i<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
ablines[i] = data$gen[501]
}
for (i in 2:24){
ablines = c(2:24)
name_function = paste('F',i,'_',i, sep='')
if(i<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
ablines[i] = data$gen[501]
}
for (i in 2:24){
ablines = c(2:24)
name_function = paste('F',i,'_',i, sep='')
print(i)
if(i<4){
data=loadDataBenchmarksF1_F3(name_function,i-1)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1)
}
ablines[i] = data$gen[501]
}
ablines
for (i in 2:24){
ablines = c(2:24)
name_function = paste('F',i,'_',i, sep='')
print(i)
if(i<4){
data=loadDataBenchmarksF1_F3(name_function,i-1, 501)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1, 501)
}
print(data$gen[501])
ablines[i] = data$gen[501]
}
loadDataBenchmarksF4_F24 = function(type, i, nrows=500){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t', skip=2,  nrows = nrows)
return(data)
}
loadDataBenchmarksF1_F3 = function(type, i, nrows=500){
filename = paste(type,'_',i,'.txt',sep='')
data = read.csv(file = filename, header = T, sep = '\t', nrows = nrows)
return(data)
}
for (i in 2:24){
ablines = c(2:24)
name_function = paste('F',i,'_',i, sep='')
print(i)
if(i<4){
data=loadDataBenchmarksF1_F3(name_function,i-1, 501)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1, 501)
}
print(data$gen[501])
ablines[i] = data$gen[501]
}
for (i in 1:24){
ablines = c(2:24)
name_function = paste('F',i,'_',i, sep='')
print(i)
if(i<4){
data=loadDataBenchmarksF1_F3(name_function,i-1, 501)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1, 501)
}
print(data$gen[501])
ablines[i] = data$gen[501]
}
for (i in 1:24){
ablines = c(2:24)
name_function = paste('F',i,'_',2, sep='')
print(i)
if(i<4){
data=loadDataBenchmarksF1_F3(name_function,i-1, 501)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1, 501)
}
print(data$gen[501])
ablines[i] = data$gen[501]
}
ablines = c(1:24)
for (i in 1:24){
name_function = paste('F',i,'_',2, sep='')
print(i)
if(i<4){
data=loadDataBenchmarksF1_F3(name_function,i-1, 501)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1, 501)
}
ablines[i] = data$gen[501]
}
ablines = c(1:24)
for (i in 1:24){
name_function = paste('F',i,'_',2, sep='')
print(i)
if(i<4){
data=loadDataBenchmarksF1_F3(name_function,i-1, 501)
}
else{
data=loadDataBenchmarksF4_F24(name_function,i-1, 501)
}
ablines[i] = data$gen[501]
}
ablines
