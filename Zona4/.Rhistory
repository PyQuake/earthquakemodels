33 ,	-3733.68,	-2424.17,	-2382.46,	79.62  ,
34 ,	-5402.06,	-2420.5 ,	-2380.94,	145.554,
35 ,	-3023.22,	-2414.04,	-2373.81,	66.0161,
36 ,	-9707.93,	-2431.76,	-2373.05,	365.937,
37 ,	-4006.58,	-2411.16,	-2371.76,	120.038,
38 ,	-3444.71,	-2400.42,	-2367.53,	81.3664,
39 ,	-3471.34,	-2396.13,	-2362.8 ,	77.697 ,
40 ,	-4340.88,	-2395.75,	-2357.5 ,	121.023,
41 ,	-3313.14,	-2385.82,	-2357.5 ,	66.6314,
42 ,	-3779.74,	-2386.24,	-2353.25,	85.2309,
43 ,	-5382.24,	-2390.93,	-2349.25,	185.082,
44 ,	-4815.52,	-2379.21,	-2349.25,	133.009,
45 ,	-3845.68,	-2371.32,	-2346.59,	80.1399,
46 ,	-3446.97,	-2370.65,	-2343.98,	79.6467,
47 ,	-3429.21,	-2366.86,	-2340.1 ,	77.8361,
48 ,	-3384.08,	-2360.14,	-2338.1 ,	57.1909,
49 ,	-4346.19,	-2365.09,	-2338.1 ,	109.007,
50 ,	-3660.67,	-2364.58,	-2335.55,	101.253,
51 ,	-3430.11,	-2358.61,	-2334.98,	80.1886,
52 ,	-5454.72,	-2366.88,	-2334.8 ,	172.361,
53 ,	-4756.94,	-2357.36,	-2332.51,	119.457,
54 ,	-3130.07,	-2349.66,	-2331.05,	62.6145,
55 ,	-2855.84,	-2344.05,	-2330.35,	47.2445,
56 ,	-3171.75,	-2345.37,	-2328.51,	54.9873,
57 ,	-2753.2 ,	-2341.21,	-2327.81,	35.5889,
58 ,	-12296.6,	-2369.05,	-2326.58,	458.924,
59 ,	-2991.37,	-2342.03,	-2326.24,	49.0345,
60 ,	-2781.42,	-2342.53,	-2324.75,	54.4234,
61 ,	-2915.48,	-2338.53,	-2317.63,	46.2759,
62 ,	-2966.1 ,	-2341.32,	-2317.63,	55.4738,
63 ,	-6332.64,	-2345.85,	-2315.26,	184.368,
64 ,	-4412.05,	-2345.08,	-2312.94,	125.857,
65 ,	-3118.51,	-2337.68,	-2312.94,	62.1401,
66 ,	-3145.93,	-2332.78,	-2312.94,	59.3264,
67 ,	-5175.82,	-2336.39,	-2307.88,	136.188,
68 ,	-3113.16,	-2328.45,	-2306.82,	61.0626,
69 ,	-5010.74,	-2332.04,	-2303.73,	135.631,
70 ,	-3725.42,	-2331.93,	-2301.67,	105.536,
71 ,	-2896.01,	-2325.74,	-2301.67,	62.8759,
72 ,	-3147.03,	-2319.2 ,	-2301.67,	51.7744,
73 ,	-2816.2 ,	-2313.65,	-2299.91,	38.0868,
74 ,	-4551.57,	-2319.8 ,	-2298.15,	115.029,
75 ,	-5411.78,	-2325.81,	-2297.97,	157.3  ,
76 ,	-2576.58,	-2308.39,	-2297.85,	29.0383,
77 ,	-3580.33,	-2320.32,	-2297.67,	106.111,
78 ,	-9518.24,	-2336.58,	-2296.59,	404.188,
79 ,	-2883.54,	-2307.98,	-2296.19,	47.9403,
80 ,	-2700.02,	-2309.75,	-2295.84,	43.1614,
81 ,	-2935.03,	-2309.91,	-2292.02,	54.0036,
82 ,	-3131.9 ,	-2309.62,	-2291.92,	65.5778,
83 ,	-3063.91,	-2309.51,	-2290.92,	64.7945,
84 ,	-3303.17,	-2308.95,	-2289.5 ,	64.0206,
85 ,	-3390.82,	-2308.75,	-2288.86,	78.518 ,
86 ,	-3200.11,	-2302.24,	-2285.3 ,	50.3682,
87 ,	-2964.94,	-2300.69,	-2285.3 ,	45.7008,
88 ,	-2750.76,	-2301.78,	-2282.65,	46.3421,
89 ,	-3263   ,	-2304   ,	-2280.91,	80.64  ,
90 ,	-2836.57,	-2299.79,	-2278.98,	46.847 ,
91 ,	-3152.19,	-2298.96,	-2278.65,	63.1938,
92 ,	-3521.36,	-2296.29,	-2277.42,	75.9619,
93 ,	-3299.14,	-2296.2 ,	-2277.18,	75.658 ,
94 ,	-2718.65,	-2288.91,	-2276.91,	45.3637,
95 ,	-3023.69,	-2294.13,	-2275.42,	62.054 ,
96 ,	-3579.08,	-2294.55,	-2275.42,	79.8349,
97 ,	-3025.48,	-2287.81,	-2275.3 ,	47.3957,
98 ,	-2961.46,	-2289.94,	-2272.16,	65.551 ,
99 ,	-3163.54,	-2289.26,	-2269.51,	69.1397)
logbook[1]
logbook[3]
logbook[3*2]
logbook[3*5]
logbook[3*3]
logbook[3*2]
logbook[3*1]
logbook[3*2]
logbook[3*5]
logbook[3+(5*2)]
logbook[3+(5*1)]
logbook[3+(5*0)]
for i in 0:99{
print(logbook[3+(5*i)])
}
for (i in 0:99){
print(logbook[3+(5*i)])
}
minList = c(rep(0,100))
for (i in 0:99){
minList[i+1]=logbook[3+(5*i)]
}
minLIst
minList
plot(minList)
plot(minList, col= 'blue')
plot(minList, col= 'blue', pch='l')
plot(minList, col= 'blue', pch='p')
plot(minList, col= 'blue', pch='-')
?plot
plot(minList, col= 'blue', pch='line')
plot(minList, col= 'blue', pch='b')
plot(minList, col= 'blue', type='b')
plot(minList, col= 'blue', type='l')
plot(minList, col= 'blue', type='l', main= 'text')
minList = c(rep(0,100))
stdList = c(rep(0,100))
for (i in 0:99){
minList[i+1]=logbook[3+(5*i)]
stdList[i+1]=logbook[4+(5*i)]
}
plot(minList, col= 'blue', type='l', main= 'text')
library("Hmisc")
install.packages("Hmisc", dependencies=T)
c=data.frame(gen, meanList, stdList)
gen=c(rep(0,100))
meanList = c(rep(0,100))
stdList = c(rep(0,100))
gen=c(rep(0,100))
for (i in 0:99){
meannList[i+1]=logbook[3+(5*i)]
stdList[i+1]=logbook[4+(5*i)]
gen[i+1]=i+1
}
library("Hmisc")
plot(meanList, col= 'blue', type='l', main= 'text', )
c=data.frame(gen, meanList, stdList)
plot(meanList, col= 'blue', type='l', main= 'text', )
meanList = c(rep(0,100))
stdList = c(rep(0,100))
gen=c(rep(0,100))
for (i in 0:99){
meanList[i+1]=logbook[3+(5*i)]
stdList[i+1]=logbook[4+(5*i)]
gen[i+1]=i+1
}
#library("Hmisc")
plot(meanList, col= 'blue', type='l', main= 'text', )
c=data.frame(gen, meanList, stdList)
interaction.plot(c$gen, c$meanList, c$stdList, col=c('red','blue'), main=paste(region,year))
interaction.plot(c$gen, c$meanList, c$stdList, col=c('red','blue'), main=paste('kanto','2005'))
interaction.plot(c$gen, c$meanList, c$stdList, col=c('red','blue'), main=paste('kanto','2005'))
interaction.plot(c$gen, c$meanList, col=c('red','blue'), main=paste('kanto','2005'))
?interaction.plot
interaction.plot( c$meanList, c$stdList, col=c('red','blue'), main=paste('kanto','2005'))
interaction.plot(c$meanList, c$stdList, [0:99], col=c('red','blue'), main=paste('kanto','2005'))
interaction.plot(c$meanList, c$stdList, c(0:99), col=c('red','blue'), main=paste('kanto','2005'))
interaction.plot(c$gen, c$meanList, c$stdList, col=c('red','blue'), main=paste('kanto','2005'))
plot(meanList, col= 'blue', type='l', main= 'text', )
, expr = errbar(c$gen, c$meanList, c$meanList+c$stdList, c$meanList-c$stdList, add=T, pch=1, cap=.1)
install.packages("Hmisc", dependencies=T)
install.packages("Hmisc", dependencies=T)
plot(c$gen, c$meanList, type="n")
with (
data = c
, expr = errbar(c$gen, c$meanList, c$meanList+c$stdList, c$meanList-c$stdList, add=T, pch=1, cap=.1)
)
interaction.plot(c$gen, c$meanList, c$stdList, col=c('red','blue'), main=paste('kanto','2005'))
interaction.plot(c$meanList, c(0:99), c$stdList, col=c('red','blue'), main=paste('kanto','2005'))
interaction.plot(c$gen, c$meanList, c$stdList, col=c('red','blue'), main=paste('kanto','2005'))
interaction.plot(ToothGrowth$dose, ToothGrowth$supp, ToothGrowth$len)
oothGrowth$len
ToothGrowth$len
ToothGrowth$supp
ToothGrowth$dose
interaction.plot(c$gen, c$meanList, c$stdList, col=c('red','blue'), main=paste('kanto','2005'))
interaction.plot(c$gen, c$meanList, c$stdList, col=c('red','blue'), main=paste('kanto','2005'))
ToothGrowth$dose
interaction.plot(ToothGrowth$dose, ToothGrowth$supp, ToothGrowth$len)
interaction.plot(c$gen, c$meanList, c$stdList, col=c('red','blue'), main=paste('kanto','2005'))
interaction.plot(c$meanList, c$stdList, c$gen, col=c('red','blue'), main=paste('kanto','2005'))
library(ggplot)
library(ggplot2)
library(ggplot2)
ggplot(c$meanList)
ggplot(c)
c
p<- ggplot(c, aes(x=gen, y=meanList)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=meanList-stdList, ymax=meanList+stdList), width=.2,
position=position_dodge(.9))
print(p
)
p<- ggplot(c, aes(x=gen, y=meanList)) +
geom_bar(stat="identity", color="blue",
position=position_dodge()) +
geom_errorbar(aes(ymin=meanList-stdList, ymax=meanList+stdList), width=.2,
position=position_dodge(.9))
print(p)
logbook
meanList = c(rep(0,100))
stdList = c(rep(0,100))
gen=c(rep(0,100))
for (i in 0:99){
meanList[i+1]=logbook[3+(5*i)]
stdList[i+1]=logbook[5+(5*i)]
gen[i+1]=i+1
}
#library("Hmisc")
c=data.frame(gen, meanList, stdList)
p<- ggplot(c, aes(x=gen, y=meanList)) +
geom_bar(stat="identity", color="blue",
position=position_dodge()) +
geom_errorbar(aes(ymin=meanList-stdList, ymax=meanList+stdList), width=.2,
position=position_dodge(.9))
print(p)
stdList
meanList
stdList
p<- ggplot(c, aes(x=gen, y=meanList)) +
geom_bar(stat="identity", color="blue",
position=position_dodge()) +
geom_errorbar(aes(ymin=meanList+stdList, ymax=meanList-stdList), width=.2,
position=position_dodge(.9))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList)) +
geom_bar(stat="identity", color="blue",
position=position_dodge()) +
geom_errorbar(aes(ymin=meanList, ymax=meanList), width=.2,
position=position_dodge(.9))
print(p)
geom_errorbar(aes(ymin=meanList+stdList, ymax=meanList-stdList),
p<- ggplot(c, aes(x=gen, y=meanList)) +
geom_bar(stat="identity", color="blue",
position=position_dodge()) +
geom_errorbar(aes(ymin=meanList+stdList, ymax=meanList-stdList),
position=position_dodge(.9))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList)) +
geom_bar(stat="identity", color="blue",
position=position_dodge()) +
geom_errorbar(aes(ymin=meanList+stdList, ymax=meanList-stdList), width=1,
position=position_dodge(.9))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList)) +
geom_bar(stat="identity", color="blue",
position=position_dodge()) +
geom_errorbar(aes(ymin=meanList+stdList, ymax=meanList-stdList), width=1,
position=position_dodge(10))
print(p)
p<- ggplot(c, aes(x=gen, y=meanLi, group=supp, color=supp)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=meanList+stdList, ymax=meanList-stdList), width=.2,
position=position_dodge(0.05))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=supp, color=supp)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=meanList+stdList, ymax=meanList-stdList), width=.2,
position=position_dodge(0.05))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=gen, color='blue')) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=meanList+stdList, ymax=meanList-stdList), width=.2,
position=position_dodge(0.05))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=stdList, color='blue')) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=meanList+stdList, ymax=meanList-stdList), width=.2,
position=position_dodge(0.05))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=stdList)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=meanList+stdList, ymax=meanList-stdList), width=.2,
position=position_dodge(0.05))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=stdList)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=.2,
position=position_dodge(0.05))
print(p)
plot(meanList, col= 'blue', type='l', main= 'text', )
meanList
stdList
p+labs(title="Tooth length per dose", x="Dose (mg)", y = "Length")+
theme_classic() +
scale_color_manual(values=c('#999999','#E69F00'))
p+labs(title="Tooth length per dose", x="Dose (mg)
)
")
p+labs(title="Tooth length per dose", x="Dose (mg)")
p+labs(title="Tooth length per dose", x="Dose (mg)", y = "Length")+
theme_classic())
p+labs(title="Tooth length per dose", x="Dose (mg)", y = "Length")+theme_classic()
p<- ggplot(c, aes(x=gen, y=meanList, group=stdList)) +
geom_line() +
geom_point()+
geom_errorbar(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=.2,
position=position_dodge(0.05)
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=1)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=.2,
position=position_dodge(0.05))
print(p)
p+labs(title="Tooth length per dose", x="Dose (mg)", y = "Length")+
theme_classic()
p+labs(title="Tooth length per dose", x="Dose (mg)", y = "Length")+
theme_classic() +
scale_color_manual(values=c('#999999','#E69F00'))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=1)) +
geom_line() +
geom_point()+
theme_classic()+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=.2,
position=position_dodge(0.05))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=1)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=.2,
position=position_dodge(0.05))
print(p)
p+labs(title="Tooth length per dose", x="Dose (mg)", y = "Length")+
scale_color_manual(values=c('#999999','#E69F00'))
p+labs(title="Tooth length per dose", x="Dose (mg)", y = "Length"))
p+labs(title="Tooth length per dose", x="Dose (mg)", y = "Length"))
p+labs(title="Tooth length per dose", x="Dose (mg)", y = "Length")
?ggplot
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=.2,color'red'
p<- ggplot(c, aes(x=gen, y=meanList, group=1)) +
geom_line() +
geom_point(color'red')+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=.2,
position=position_dodge(0.05))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=1)) +
geom_line() +
geom_point(color'red')+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=.2,
position=position_dodge(10.05))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=1)) +
geom_line() +
geom_point(color='red')+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=.2,
position=position_dodge(10.05))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=1), color='blue') +
geom_line() +
geom_point(color='red')+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=.2,
position=position_dodge(10.05))
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=1), color='blue') +
geom_line() +
geom_point(color='red')+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=.2)
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=1), color='blue') +
geom_line() +
geom_point(color='red')+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=10.2)
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=1), color='blue') +
geom_line() +
geom_point(color='red')+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=0.2)
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=1)) +
geom_line(color='blue') +
geom_point(color='red')+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=0.2)
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=1)) +
geom_line() +
geom_point(color='red')+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=0.2, color='blue')
print(p)
p<- ggplot(c, aes(x=gen, y=meanList, group=1)) +
geom_line(color='orange') +
geom_point(color='orange')+
geom_errorbar(aes(ymin=c$meanList+c$stdList, ymax=c$meanList-c$stdList), width=0.2, color='black')
print(p)
?grid.arrange
?gridExtra
library(ggplot2)
library(gridExtra)
loadData = function(type,region, year, i){
setwd("~/Documents/estudos/master-unb/earthquakemodels/Zona4/")
file = paste(type,'/',region, type,year,'_',i,'logbook.txt',sep="")
data = read.csv2(file, sep='\t', header=T)
data$std = as.numeric(levels(data$std))[data$std]
data$max = as.numeric(levels(data$max))[data$max]
return(data)
}
chooseRegion = function(i){
if (i==1) {
region="Kanto"
}
else if (i==2) {
region="Kansai"
}
else if (i==3) {
region = "Tohoku"
}
else{
region = "EastJapan"
}
return(region)
}
createData = function(modelName, region, year){
data1 = loadData(modelName, region, year, 0)
data2 = loadData(modelName, region, year, 1)
data3 = loadData(modelName, region, year, 2)
data4 = loadData(modelName, region, year, 3)
data5 = loadData(modelName, region, year, 4)
data6 = loadData(modelName, region, year, 5)
data7 = loadData(modelName, region, year, 6)
data8 = loadData(modelName, region, year, 7)
data9 = loadData(modelName, region, year, 8)
data10 = loadData(modelName, region, year, 9)
data1$std = pmin(data1$std, 500)
data2$std = pmin(data1$std, 500)
data3$std = pmin(data1$std, 500)
data4$std = pmin(data1$std, 500)
data5$std = pmin(data1$std, 500)
data6$std = pmin(data1$std, 500)
data7$std = pmin(data1$std, 500)
data8$std = pmin(data1$std, 500)
data9$std = pmin(data1$std, 500)
data10$std = pmin(data1$std, 500)
maxs = c(rep(0,length(data1$max)))
for (i in 1:length(data1$max)){
maxs[i] = ((data1$max[i] + data2$max[i] + data3$max[i] + data4$max[i] + data5$max[i] +
data6$max[i] + data7$max[i] + data8$max[i] + data9$max[i] + data10$max[i])/10)
}
stds = c(rep(0,length(data1$std)))
for (i in 1:length(data1$std)){
stds[i] = ((data1$std[i] + data2$std[i] + data3$std[i] + data4$std[i] + data5$std[i] +
data6$std[i] + data7$std[i] + data8$std[i] + data9$std[i] + data10$std[i])/10)
}
gen = c(1:200)
data = data.frame(
setNames(replicate(3,numeric(0), simplify = F),
c("maxs", "stds", "gen")))
data = data.frame(maxs, stds, gen)
return (data)
}
modelName = 'GAModel'
region='EastJapan'
yaer=2006
year=2006
data1 = loadData(modelName, region, year, 0)
data2 = loadData(modelName, region, year, 1)
data3 = loadData(modelName, region, year, 2)
data4 = loadData(modelName, region, year, 3)
data5 = loadData(modelName, region, year, 4)
data6 = loadData(modelName, region, year, 5)
data7 = loadData(modelName, region, year, 6)
data8 = loadData(modelName, region, year, 7)
data9 = loadData(modelName, region, year, 8)
data10 = loadData(modelName, region, year, 9)
data1$std = pmin(data1$std, 500)
data2$std = pmin(data1$std, 500)
data3$std = pmin(data1$std, 500)
data4$std = pmin(data1$std, 500)
data5$std = pmin(data1$std, 500)
data6$std = pmin(data1$std, 500)
data7$std = pmin(data1$std, 500)
data8$std = pmin(data1$std, 500)
data9$std = pmin(data1$std, 500)
data10$std = pmin(data1$std, 500)
maxs = c(rep(0,length(data1$max)))
for (i in 1:length(data1$max)){
maxs[i] = ((data1$max[i] + data2$max[i] + data3$max[i] + data4$max[i] + data5$max[i] +
data6$max[i] + data7$max[i] + data8$max[i] + data9$max[i] + data10$max[i])/10)
}
stds = c(rep(0,length(data1$std)))
for (i in 1:length(data1$std)){
stds[i] = ((data1$std[i] + data2$std[i] + data3$std[i] + data4$std[i] + data5$std[i] +
data6$std[i] + data7$std[i] + data8$std[i] + data9$std[i] + data10$std[i])/10)
}
max
maxs
modelName="ReducedGAModel"
data1 = loadData(modelName, region, year, 0)
data2 = loadData(modelName, region, year, 1)
data3 = loadData(modelName, region, year, 2)
data4 = loadData(modelName, region, year, 3)
data5 = loadData(modelName, region, year, 4)
data6 = loadData(modelName, region, year, 5)
data7 = loadData(modelName, region, year, 6)
data8 = loadData(modelName, region, year, 7)
data9 = loadData(modelName, region, year, 8)
data10 = loadData(modelName, region, year, 9)
data1$std = pmin(data1$std, 500)
data2$std = pmin(data1$std, 500)
data3$std = pmin(data1$std, 500)
data4$std = pmin(data1$std, 500)
data5$std = pmin(data1$std, 500)
data6$std = pmin(data1$std, 500)
data7$std = pmin(data1$std, 500)
data8$std = pmin(data1$std, 500)
data9$std = pmin(data1$std, 500)
data10$std = pmin(data1$std, 500)
maxs = c(rep(0,length(data1$max)))
for (i in 1:length(data1$max)){
maxs[i] = ((data1$max[i] + data2$max[i] + data3$max[i] + data4$max[i] + data5$max[i] +
data6$max[i] + data7$max[i] + data8$max[i] + data9$max[i] + data10$max[i])/10)
}
stds = c(rep(0,length(data1$std)))
for (i in 1:length(data1$std)){
stds[i] = ((data1$std[i] + data2$std[i] + data3$std[i] + data4$std[i] + data5$std[i] +
data6$std[i] + data7$std[i] + data8$std[i] + data9$std[i] + data10$std[i])/10)
}
maxs
